// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ozonmp/stm_like_api/v1/stm_like_api.proto

package stm_like_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Like with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Like) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for StreamId

	// no validation rules for Uuid

	if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LikeValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LikeValidationError is the validation error returned by Like.Validate if the
// designated constraints aren't met.
type LikeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LikeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LikeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LikeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LikeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LikeValidationError) ErrorName() string { return "LikeValidationError" }

// Error satisfies the builtin error interface
func (e LikeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLike.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LikeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LikeValidationError{}

// Validate checks the field values on CreateLikeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateLikeRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetLike()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLikeRequestValidationError{
				field:  "Like",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateLikeRequestValidationError is the validation error returned by
// CreateLikeRequest.Validate if the designated constraints aren't met.
type CreateLikeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLikeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLikeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLikeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLikeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLikeRequestValidationError) ErrorName() string {
	return "CreateLikeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLikeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLikeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLikeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLikeRequestValidationError{}

// Validate checks the field values on CreateLikeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateLikeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateLikeResponseValidationError is the validation error returned by
// CreateLikeResponse.Validate if the designated constraints aren't met.
type CreateLikeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLikeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLikeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLikeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLikeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLikeResponseValidationError) ErrorName() string {
	return "CreateLikeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLikeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLikeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLikeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLikeResponseValidationError{}
