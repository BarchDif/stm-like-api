// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stm_like_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StmLikeServiceClient is the client API for StmLikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StmLikeServiceClient interface {
	CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeResponse, error)
}

type stmLikeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStmLikeServiceClient(cc grpc.ClientConnInterface) StmLikeServiceClient {
	return &stmLikeServiceClient{cc}
}

func (c *stmLikeServiceClient) CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeResponse, error) {
	out := new(CreateLikeResponse)
	err := c.cc.Invoke(ctx, "/BarchDif.stm_like_api.v1.StmLikeService/CreateLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StmLikeServiceServer is the server API for StmLikeService service.
// All implementations must embed UnimplementedStmLikeServiceServer
// for forward compatibility
type StmLikeServiceServer interface {
	CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeResponse, error)
	mustEmbedUnimplementedStmLikeServiceServer()
}

// UnimplementedStmLikeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStmLikeServiceServer struct {
}

func (UnimplementedStmLikeServiceServer) CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedStmLikeServiceServer) mustEmbedUnimplementedStmLikeServiceServer() {}

// UnsafeStmLikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StmLikeServiceServer will
// result in compilation errors.
type UnsafeStmLikeServiceServer interface {
	mustEmbedUnimplementedStmLikeServiceServer()
}

func RegisterStmLikeServiceServer(s grpc.ServiceRegistrar, srv StmLikeServiceServer) {
	s.RegisterService(&StmLikeService_ServiceDesc, srv)
}

func _StmLikeService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StmLikeServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BarchDif.stm_like_api.v1.StmLikeService/CreateLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StmLikeServiceServer).CreateLike(ctx, req.(*CreateLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StmLikeService_ServiceDesc is the grpc.ServiceDesc for StmLikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StmLikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BarchDif.stm_like_api.v1.StmLikeService",
	HandlerType: (*StmLikeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLike",
			Handler:    _StmLikeService_CreateLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ozonmp/stm_like_api/v1/stm_like_api.proto",
}
